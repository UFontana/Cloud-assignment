// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shardmaster.proto

#ifndef PROTOBUF_INCLUDED_shardmaster_2eproto
#define PROTOBUF_INCLUDED_shardmaster_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_shardmaster_2eproto 

namespace protobuf_shardmaster_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_shardmaster_2eproto
class ConfigEntry;
class ConfigEntryDefaultTypeInternal;
extern ConfigEntryDefaultTypeInternal _ConfigEntry_default_instance_;
class GDPRDeleteRequest;
class GDPRDeleteRequestDefaultTypeInternal;
extern GDPRDeleteRequestDefaultTypeInternal _GDPRDeleteRequest_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class LeaveRequest;
class LeaveRequestDefaultTypeInternal;
extern LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;
class MoveRequest;
class MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class Shard;
class ShardDefaultTypeInternal;
extern ShardDefaultTypeInternal _Shard_default_instance_;
namespace google {
namespace protobuf {
template<> ::ConfigEntry* Arena::CreateMaybeMessage<::ConfigEntry>(Arena*);
template<> ::GDPRDeleteRequest* Arena::CreateMaybeMessage<::GDPRDeleteRequest>(Arena*);
template<> ::JoinRequest* Arena::CreateMaybeMessage<::JoinRequest>(Arena*);
template<> ::LeaveRequest* Arena::CreateMaybeMessage<::LeaveRequest>(Arena*);
template<> ::MoveRequest* Arena::CreateMaybeMessage<::MoveRequest>(Arena*);
template<> ::QueryResponse* Arena::CreateMaybeMessage<::QueryResponse>(Arena*);
template<> ::Shard* Arena::CreateMaybeMessage<::Shard>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Shard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Shard) */ {
 public:
  Shard();
  virtual ~Shard();

  Shard(const Shard& from);

  inline Shard& operator=(const Shard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shard(Shard&& from) noexcept
    : Shard() {
    *this = ::std::move(from);
  }

  inline Shard& operator=(Shard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Shard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shard* internal_default_instance() {
    return reinterpret_cast<const Shard*>(
               &_Shard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Shard* other);
  friend void swap(Shard& a, Shard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shard* New() const final {
    return CreateMaybeMessage<Shard>(NULL);
  }

  Shard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Shard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Shard& from);
  void MergeFrom(const Shard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 lower = 1;
  void clear_lower();
  static const int kLowerFieldNumber = 1;
  ::google::protobuf::uint32 lower() const;
  void set_lower(::google::protobuf::uint32 value);

  // uint32 upper = 2;
  void clear_upper();
  static const int kUpperFieldNumber = 2;
  ::google::protobuf::uint32 upper() const;
  void set_upper(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Shard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 lower_;
  ::google::protobuf::uint32 upper_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JoinRequest) */ {
 public:
  JoinRequest();
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JoinRequest* other);
  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const final {
    return CreateMaybeMessage<JoinRequest>(NULL);
  }

  JoinRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server = 1;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // @@protoc_insertion_point(class_scope:JoinRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LeaveRequest) */ {
 public:
  LeaveRequest();
  virtual ~LeaveRequest();

  LeaveRequest(const LeaveRequest& from);

  inline LeaveRequest& operator=(const LeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveRequest(LeaveRequest&& from) noexcept
    : LeaveRequest() {
    *this = ::std::move(from);
  }

  inline LeaveRequest& operator=(LeaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveRequest*>(
               &_LeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LeaveRequest* other);
  friend void swap(LeaveRequest& a, LeaveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveRequest* New() const final {
    return CreateMaybeMessage<LeaveRequest>(NULL);
  }

  LeaveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaveRequest& from);
  void MergeFrom(const LeaveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string servers = 1;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  const ::std::string& servers(int index) const;
  ::std::string* mutable_servers(int index);
  void set_servers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_servers(int index, ::std::string&& value);
  #endif
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  ::std::string* add_servers();
  void add_servers(const ::std::string& value);
  #if LANG_CXX11
  void add_servers(::std::string&& value);
  #endif
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& servers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_servers();

  // @@protoc_insertion_point(class_scope:LeaveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> servers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MoveRequest) */ {
 public:
  MoveRequest();
  virtual ~MoveRequest();

  MoveRequest(const MoveRequest& from);

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MoveRequest* other);
  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveRequest* New() const final {
    return CreateMaybeMessage<MoveRequest>(NULL);
  }

  MoveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveRequest& from);
  void MergeFrom(const MoveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server = 1;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // .Shard shard = 2;
  bool has_shard() const;
  void clear_shard();
  static const int kShardFieldNumber = 2;
  private:
  const ::Shard& _internal_shard() const;
  public:
  const ::Shard& shard() const;
  ::Shard* release_shard();
  ::Shard* mutable_shard();
  void set_allocated_shard(::Shard* shard);

  // @@protoc_insertion_point(class_scope:MoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::Shard* shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConfigEntry) */ {
 public:
  ConfigEntry();
  virtual ~ConfigEntry();

  ConfigEntry(const ConfigEntry& from);

  inline ConfigEntry& operator=(const ConfigEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEntry(ConfigEntry&& from) noexcept
    : ConfigEntry() {
    *this = ::std::move(from);
  }

  inline ConfigEntry& operator=(ConfigEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEntry* internal_default_instance() {
    return reinterpret_cast<const ConfigEntry*>(
               &_ConfigEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConfigEntry* other);
  friend void swap(ConfigEntry& a, ConfigEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEntry* New() const final {
    return CreateMaybeMessage<ConfigEntry>(NULL);
  }

  ConfigEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEntry& from);
  void MergeFrom(const ConfigEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Shard shards = 2;
  int shards_size() const;
  void clear_shards();
  static const int kShardsFieldNumber = 2;
  ::Shard* mutable_shards(int index);
  ::google::protobuf::RepeatedPtrField< ::Shard >*
      mutable_shards();
  const ::Shard& shards(int index) const;
  ::Shard* add_shards();
  const ::google::protobuf::RepeatedPtrField< ::Shard >&
      shards() const;

  // string server = 3;
  void clear_server();
  static const int kServerFieldNumber = 3;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // @@protoc_insertion_point(class_scope:ConfigEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Shard > shards_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(QueryResponse* other);
  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(NULL);
  }

  QueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigEntry config = 1;
  int config_size() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  ::ConfigEntry* mutable_config(int index);
  ::google::protobuf::RepeatedPtrField< ::ConfigEntry >*
      mutable_config();
  const ::ConfigEntry& config(int index) const;
  ::ConfigEntry* add_config();
  const ::google::protobuf::RepeatedPtrField< ::ConfigEntry >&
      config() const;

  // @@protoc_insertion_point(class_scope:QueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ConfigEntry > config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GDPRDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GDPRDeleteRequest) */ {
 public:
  GDPRDeleteRequest();
  virtual ~GDPRDeleteRequest();

  GDPRDeleteRequest(const GDPRDeleteRequest& from);

  inline GDPRDeleteRequest& operator=(const GDPRDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GDPRDeleteRequest(GDPRDeleteRequest&& from) noexcept
    : GDPRDeleteRequest() {
    *this = ::std::move(from);
  }

  inline GDPRDeleteRequest& operator=(GDPRDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GDPRDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GDPRDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const GDPRDeleteRequest*>(
               &_GDPRDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GDPRDeleteRequest* other);
  friend void swap(GDPRDeleteRequest& a, GDPRDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GDPRDeleteRequest* New() const final {
    return CreateMaybeMessage<GDPRDeleteRequest>(NULL);
  }

  GDPRDeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GDPRDeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GDPRDeleteRequest& from);
  void MergeFrom(const GDPRDeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPRDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:GDPRDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shardmaster_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shard

// uint32 lower = 1;
inline void Shard::clear_lower() {
  lower_ = 0u;
}
inline ::google::protobuf::uint32 Shard::lower() const {
  // @@protoc_insertion_point(field_get:Shard.lower)
  return lower_;
}
inline void Shard::set_lower(::google::protobuf::uint32 value) {
  
  lower_ = value;
  // @@protoc_insertion_point(field_set:Shard.lower)
}

// uint32 upper = 2;
inline void Shard::clear_upper() {
  upper_ = 0u;
}
inline ::google::protobuf::uint32 Shard::upper() const {
  // @@protoc_insertion_point(field_get:Shard.upper)
  return upper_;
}
inline void Shard::set_upper(::google::protobuf::uint32 value) {
  
  upper_ = value;
  // @@protoc_insertion_point(field_set:Shard.upper)
}

// -------------------------------------------------------------------

// JoinRequest

// string server = 1;
inline void JoinRequest::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRequest::server() const {
  // @@protoc_insertion_point(field_get:JoinRequest.server)
  return server_.GetNoArena();
}
inline void JoinRequest::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JoinRequest.server)
}
#if LANG_CXX11
inline void JoinRequest::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JoinRequest.server)
}
#endif
inline void JoinRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JoinRequest.server)
}
inline void JoinRequest::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JoinRequest.server)
}
inline ::std::string* JoinRequest::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:JoinRequest.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRequest::release_server() {
  // @@protoc_insertion_point(field_release:JoinRequest.server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:JoinRequest.server)
}

// -------------------------------------------------------------------

// LeaveRequest

// repeated string servers = 1;
inline int LeaveRequest::servers_size() const {
  return servers_.size();
}
inline void LeaveRequest::clear_servers() {
  servers_.Clear();
}
inline const ::std::string& LeaveRequest::servers(int index) const {
  // @@protoc_insertion_point(field_get:LeaveRequest.servers)
  return servers_.Get(index);
}
inline ::std::string* LeaveRequest::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:LeaveRequest.servers)
  return servers_.Mutable(index);
}
inline void LeaveRequest::set_servers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LeaveRequest.servers)
  servers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LeaveRequest::set_servers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:LeaveRequest.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LeaveRequest::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LeaveRequest.servers)
}
inline void LeaveRequest::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LeaveRequest.servers)
}
inline ::std::string* LeaveRequest::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:LeaveRequest.servers)
  return servers_.Add();
}
inline void LeaveRequest::add_servers(const ::std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LeaveRequest.servers)
}
#if LANG_CXX11
inline void LeaveRequest::add_servers(::std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LeaveRequest.servers)
}
#endif
inline void LeaveRequest::add_servers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LeaveRequest.servers)
}
inline void LeaveRequest::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LeaveRequest.servers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LeaveRequest::servers() const {
  // @@protoc_insertion_point(field_list:LeaveRequest.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LeaveRequest::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:LeaveRequest.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// MoveRequest

// string server = 1;
inline void MoveRequest::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveRequest::server() const {
  // @@protoc_insertion_point(field_get:MoveRequest.server)
  return server_.GetNoArena();
}
inline void MoveRequest::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MoveRequest.server)
}
#if LANG_CXX11
inline void MoveRequest::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MoveRequest.server)
}
#endif
inline void MoveRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MoveRequest.server)
}
inline void MoveRequest::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MoveRequest.server)
}
inline ::std::string* MoveRequest::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:MoveRequest.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveRequest::release_server() {
  // @@protoc_insertion_point(field_release:MoveRequest.server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveRequest::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:MoveRequest.server)
}

// .Shard shard = 2;
inline bool MoveRequest::has_shard() const {
  return this != internal_default_instance() && shard_ != NULL;
}
inline void MoveRequest::clear_shard() {
  if (GetArenaNoVirtual() == NULL && shard_ != NULL) {
    delete shard_;
  }
  shard_ = NULL;
}
inline const ::Shard& MoveRequest::_internal_shard() const {
  return *shard_;
}
inline const ::Shard& MoveRequest::shard() const {
  const ::Shard* p = shard_;
  // @@protoc_insertion_point(field_get:MoveRequest.shard)
  return p != NULL ? *p : *reinterpret_cast<const ::Shard*>(
      &::_Shard_default_instance_);
}
inline ::Shard* MoveRequest::release_shard() {
  // @@protoc_insertion_point(field_release:MoveRequest.shard)
  
  ::Shard* temp = shard_;
  shard_ = NULL;
  return temp;
}
inline ::Shard* MoveRequest::mutable_shard() {
  
  if (shard_ == NULL) {
    auto* p = CreateMaybeMessage<::Shard>(GetArenaNoVirtual());
    shard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MoveRequest.shard)
  return shard_;
}
inline void MoveRequest::set_allocated_shard(::Shard* shard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shard_;
  }
  if (shard) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shard = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shard, submessage_arena);
    }
    
  } else {
    
  }
  shard_ = shard;
  // @@protoc_insertion_point(field_set_allocated:MoveRequest.shard)
}

// -------------------------------------------------------------------

// ConfigEntry

// repeated .Shard shards = 2;
inline int ConfigEntry::shards_size() const {
  return shards_.size();
}
inline void ConfigEntry::clear_shards() {
  shards_.Clear();
}
inline ::Shard* ConfigEntry::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigEntry.shards)
  return shards_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Shard >*
ConfigEntry::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:ConfigEntry.shards)
  return &shards_;
}
inline const ::Shard& ConfigEntry::shards(int index) const {
  // @@protoc_insertion_point(field_get:ConfigEntry.shards)
  return shards_.Get(index);
}
inline ::Shard* ConfigEntry::add_shards() {
  // @@protoc_insertion_point(field_add:ConfigEntry.shards)
  return shards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Shard >&
ConfigEntry::shards() const {
  // @@protoc_insertion_point(field_list:ConfigEntry.shards)
  return shards_;
}

// string server = 3;
inline void ConfigEntry::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigEntry::server() const {
  // @@protoc_insertion_point(field_get:ConfigEntry.server)
  return server_.GetNoArena();
}
inline void ConfigEntry::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigEntry.server)
}
#if LANG_CXX11
inline void ConfigEntry::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigEntry.server)
}
#endif
inline void ConfigEntry::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigEntry.server)
}
inline void ConfigEntry::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigEntry.server)
}
inline ::std::string* ConfigEntry::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:ConfigEntry.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigEntry::release_server() {
  // @@protoc_insertion_point(field_release:ConfigEntry.server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigEntry::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:ConfigEntry.server)
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .ConfigEntry config = 1;
inline int QueryResponse::config_size() const {
  return config_.size();
}
inline void QueryResponse::clear_config() {
  config_.Clear();
}
inline ::ConfigEntry* QueryResponse::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResponse.config)
  return config_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigEntry >*
QueryResponse::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:QueryResponse.config)
  return &config_;
}
inline const ::ConfigEntry& QueryResponse::config(int index) const {
  // @@protoc_insertion_point(field_get:QueryResponse.config)
  return config_.Get(index);
}
inline ::ConfigEntry* QueryResponse::add_config() {
  // @@protoc_insertion_point(field_add:QueryResponse.config)
  return config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigEntry >&
QueryResponse::config() const {
  // @@protoc_insertion_point(field_list:QueryResponse.config)
  return config_;
}

// -------------------------------------------------------------------

// GDPRDeleteRequest

// string key = 1;
inline void GDPRDeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GDPRDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:GDPRDeleteRequest.key)
  return key_.GetNoArena();
}
inline void GDPRDeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDPRDeleteRequest.key)
}
#if LANG_CXX11
inline void GDPRDeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDPRDeleteRequest.key)
}
#endif
inline void GDPRDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDPRDeleteRequest.key)
}
inline void GDPRDeleteRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDPRDeleteRequest.key)
}
inline ::std::string* GDPRDeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:GDPRDeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GDPRDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:GDPRDeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GDPRDeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:GDPRDeleteRequest.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_shardmaster_2eproto
